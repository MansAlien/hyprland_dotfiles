{"clipboardHistory":[{"value":"# SSH keys, GPG keys, credentials\n.ssh/\n.gnupg/\n\n# Shell history\n.bash_history\n.zsh_history\n\n# Local caches\n.cache/\n.local/\n.npm/\n.node_repl_history\n\n# Python / Virtualenv\n.python_history\n.venv/\n__pycache__/\n*.pyc\n\n# Package managers\n.packages/\nyarn.lock\npackage-lock.json\n\n# System-specific\n.DS_Store\nThumbs.db\n\n# XDG runtime (temporary files)\n.runtime/\n","recorded":"2025-09-26 17:46:19.633358101","filePath":"null","pinned":false},{"value":"sdf\nsdf\nsdf\nsdf\nsdf\n\nsdf\n","recorded":"2025-09-26 17:42:00.798607234","filePath":"null","pinned":false},{"value":", \"ar\"","recorded":"2025-09-26 17:41:45.142387494","filePath":"null","pinned":false},{"value":"\n","recorded":"2025-09-26 17:40:56.791453184","filePath":"null","pinned":false},{"value":"-- Enable spell checking by default\nvim.opt.spell = true\n","recorded":"2025-09-26 17:40:56.117812270","filePath":"null","pinned":false},{"value":"vim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"markdown\", \"text\", \"gitcommit\" }, -- add more if needed\n  callback = function()\n    vim.opt_local.spell = true\n    vim.opt_local.spelllang = { \"en\", \"ar\" } -- both English \u0026 Arabic\n  end,\n})\n","recorded":"2025-09-26 17:31:13.428284246","filePath":"null","pinned":false},{"value":"vim.cmd(\"set expandtab\")\nvim.cmd(\"set tabstop=2\")\nvim.cmd(\"set softtabstop=2\")\nvim.cmd(\"set shiftwidth=2\")\nvim.g.mapleader = \" \"\n\n-- Enable spell checking by default\nvim.opt.spell = true\n\n-- Set languages (English + Arabic)\nvim.opt.spelllang = { \"en\" }\n\nvim.wo.number = true\n\n-- Enable treesitter folding for markdown\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = function()\n    vim.opt_local.foldmethod = \"expr\"\n    vim.opt_local.foldexpr = \"nvim_treesitter#foldexpr()\"\n    vim.opt_local.foldenable = true\n    vim.opt_local.foldlevel = 1  -- Start with level 1 headers open\n  end,\n})\n\n-- Folding keymaps\nvim.keymap.set('n', 'zo', 'zo', { desc = 'Open fold' })\nvim.keymap.set('n', 'zc', 'zc', { desc = 'Close fold' })\nvim.keymap.set('n', 'za', 'za', { desc = 'Toggle fold' })\nvim.keymap.set('n', 'zR', 'zR', { desc = 'Open all folds' })\nvim.keymap.set('n', 'zM', 'zM', { desc = 'Close all folds' })\nvim.keymap.set('n', 'zr', 'zr', { desc = 'Reduce fold level' })\nvim.keymap.set('n', 'zm', 'zm', { desc = 'Increase fold level' })\n","recorded":"2025-09-26 17:28:11.550601379","filePath":"null","pinned":false},{"value":"git@github.com:MansAlien/hyprland_dotfiles.git","recorded":"2025-09-26 17:26:16.444354597","filePath":"null","pinned":false},{"value":"        follow_current_file = true, -- This ensures the tree follows the current file\n","recorded":"2025-09-26 17:23:01.132614855","filePath":"null","pinned":false},{"value":"follow_current_file = {\n      enabled = true, -- This replaces the old `true/false`\n      leave_dirs_open = false, -- optional: closes dirs not related to current file\n    },","recorded":"2025-09-26 17:20:11.082618158","filePath":"null","pinned":false},{"value":"# Neo-tree configuration has been updated. Please review the changes below.\n## The filesystem.follow_current_file option is replaced with a table, please move to filesystem.follow_current_file.enabled.","recorded":"2025-09-26 17:19:01.037431727","filePath":"null","pinned":false},{"value":"# Neo-tree configuration has been updated. Please review the changes below.\n\n## The `filesystem.follow_current_file` option is replaced with a table, please move to `filesystem.follow_current_file.enabled`.\n","recorded":"2025-09-26 17:18:40.868441725","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\",\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\nrequire(\"markdown-folding\") -- Assumes markdown-folding.lua is in ~/.config/nvim/lua/\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Basic folding setup for non-markdown files\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Treesitter folding for non-markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\" },\n  callback = function()\n    vim.wo.foldmethod = \"expr\"\n    vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.wo.foldlevel = 99\n    vim.wo.foldlevelstart = 99\n  end,\n})\n\n-- General folding keymaps (for non-markdown files)\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n","recorded":"2025-09-26 17:15:31.985492938","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\",\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\nrequire(\"markdown-folding\") -- Assumes markdown-folding.lua is in ~/.config/nvim/lua/\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Basic folding setup for non-markdown files\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt_global.foldlevelstart = 99  -- Set globally\n  end,\n})\n\n-- Treesitter folding for non-markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\" },\n  callback = function()\n    vim.wo.foldmethod = \"expr\"\n    vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.wo.foldlevel = 99  -- Window-local\n    -- Remove vim.wo.foldlevelstart here, as it's set globally in VimEnter\n  end,\n})\n\n-- General folding keymaps (for non-markdown files)\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })","recorded":"2025-09-26 17:15:23.217926260","filePath":"null","pinned":false},{"value":"[Neo-tree ERROR] Error opening file: vim/_editor.lua:0: nvim_exec2()[1]..BufReadPost Autocommands for \"*\": Vim(append):Error executing lua callb\nack: /usr/share/nvim/runtime/filetype.lua:36: nvim_exec2()[1]..BufReadPost Autocommands for \"*\"..FileType Autocommands for \"lua\": Vim(append):Er\nror executing lua callback: /home/alien/.config/nvim/init.lua:40: 'win' cannot be passed for global option 'foldlevelstart'                     \nstack traceback:                                                                                                                                \n        [C]: in function '__newindex'                                                                                                           \n        /home/alien/.config/nvim/init.lua:40: in function \u003c/home/alien/.config/nvim/init.lua:36\u003e                                                \n        [C]: in function 'nvim_cmd'                                                                                                             \n        /usr/share/nvim/runtime/filetype.lua:36: in function \u003c/usr/share/nvim/runtime/filetype.lua:35\u003e                                          \n        [C]: in function 'pcall'                                                                                                                \n        vim/shared.lua: in function \u003cvim/shared.lua:0\u003e                                                                                          \n        [C]: in function '_with'                                                                                                                \n        /usr/share/nvim/runtime/filetype.lua:35: in function \u003c/usr/share/nvim/runtime/filetype.lua:10\u003e                                          \n        [C]: in function 'nvim_exec2'                                                                                                           \n        vim/_editor.lua: in function \u003cvim/_editor.lua:0\u003e                                                                                        \n        [C]: in function 'pcall'                                                                                                                \n        ...hare/nvim/lazy/neo-tree.nvim/lua/neo-tree/utils/init.lua:821: in function 'open_file'                                                \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:807: in function 'open'                                                     \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:829: in function 'open_with_cmd'                                            \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:837: in function 'open'                                                     \n        ...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lua:206: in function \u003c...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lu\na:205\u003e                                                                                                                                          \nstack traceback:                                                                                                                                \n        [C]: in function '_with'                                                                                                                \n        /usr/share/nvim/runtime/filetype.lua:35: in function \u003c/usr/share/nvim/runtime/filetype.lua:10\u003e                                          \n        [C]: in function 'nvim_exec2'                                                                                                           \n        vim/_editor.lua: in function \u003cvim/_editor.lua:0\u003e                                                                                        \n        [C]: in function 'pcall'                                                                                                                \n        ...hare/nvim/lazy/neo-tree.nvim/lua/neo-tree/utils/init.lua:821: in function 'open_file'                                                \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:807: in function 'open'                                                     \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:829: in function 'open_with_cmd'                                            \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:837: in function 'open'                                                     \n        ...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lua:206: in function \u003c...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lu\na:205\u003e","recorded":"2025-09-26 16:52:03.345482134","filePath":"null","pinned":false},{"value":"\nreturn {\"nvim-neo-tree/neo-tree.nvim\",\n  branch = \"v3.x\",\n  dependencies = {\n      \"nvim-lua/plenary.nvim\",\n      \"nvim-tree/nvim-web-devicons\", -- not strictly required, but recommended\n      \"MunifTanjim/nui.nvim\",\n  },\n  config = function ()\n    vim.keymap.set('n', '\u003cC-n\u003e', \":Neotree toggle\u003cCR\u003e\")\n  end\n}\n","recorded":"2025-09-26 16:49:46.985077848","filePath":"null","pinned":false},{"value":"return {\n  \"nvim-neo-tree/neo-tree.nvim\",\n  branch = \"v3.x\",\n  dependencies = {\n    \"nvim-lua/plenary.nvim\",\n    \"nvim-tree/nvim-web-devicons\", -- not strictly required, but recommended\n    \"MunifTanjim/nui.nvim\",\n  },\n  config = function()\n    -- Setup neo-tree with basic configuration\n    require(\"neo-tree\").setup {\n      filesystem = {\n        follow_current_file = true, -- This ensures the tree follows the current file\n        hijack_netrw_behavior = \"open_current\", -- Open files in the current window\n        use_libuv_file_watcher = true, -- Improves file watching performance\n      },\n      window = {\n        mappings = {\n          [\"\u003ccr\u003e\"] = \"open\", -- Default mapping to open files\n          [\"o\"] = \"open\",    -- Alternative mapping\n        },\n      },\n      default_component_configs = {\n        indent = {\n          padding = 0, -- Adjust padding if needed\n        },\n      },\n    }\n\n    -- Keymap to toggle neo-tree\n    vim.keymap.set(\"n\", \"\u003cC-n\u003e\", \":Neotree toggle\u003cCR\u003e\", { silent = true })\n  end,\n}","recorded":"2025-09-26 16:49:02.795931218","filePath":"null","pinned":false},{"value":"sdf\n","recorded":"2025-09-26 16:44:49.869952453","filePath":"null","pinned":false},{"value":"-- Autocommand for printing the autosaved message\nlocal group = vim.api.nvim_create_augroup(\"autosave\", {})\nvim.api.nvim_create_autocmd(\"User\", {\n  pattern = \"AutoSaveWritePost\",\n  group = group,\n  callback = function(opts)\n    if opts.data.saved_buffer ~= nil then\n      -- print(\"AutoSaved at \" .. vim.fn.strftime(\"%H:%M:%S\"))\n      print(\"AutoSaved\")\n    end\n  end,\n})\n\n-- I do not want to save when I'm in visual mode because I'm usually moving\n-- stuff from one place to another, or deleting it\n-- I got this suggestion from the plugin maintainers\n-- https://github.com/okuuva/auto-save.nvim/issues/67#issuecomment-2597631756\nlocal visual_event_group = vim.api.nvim_create_augroup(\"visual_event\", { clear = true })\n\nvim.api.nvim_create_autocmd(\"ModeChanged\", {\n  group = visual_event_group,\n  pattern = { \"*:[vV\\x16]*\" },\n  callback = function()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"VisualEnter\" })\n    -- print(\"VisualEnter\")\n  end,\n})\n\nvim.api.nvim_create_autocmd(\"ModeChanged\", {\n  group = visual_event_group,\n  pattern = { \"[vV\\x16]*:*\" },\n  callback = function()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"VisualLeave\" })\n    -- print(\"VisualLeave\")\n  end,\n})\n\n-- Override the `flash.jump` function to detect start and end\nlocal flash = require(\"flash\")\nlocal original_jump = flash.jump\n\nflash.jump = function(opts)\n  vim.api.nvim_exec_autocmds(\"User\", { pattern = \"FlashJumpStart\" })\n  -- print(\"flash.nvim enter\")\n\n  original_jump(opts)\n\n  vim.api.nvim_exec_autocmds(\"User\", { pattern = \"FlashJumpEnd\" })\n  -- print(\"flash.nvim leave\")\nend\n\n-- Disable auto-save when entering a snacks_input buffer\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"snacks_input\",\n  group = group,\n  callback = function()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"SnacksInputEnter\" })\n    -- print(\"snacks input enter\")\n  end,\n})\n\n-- Re-enable auto-save when leaving that buffer\nvim.api.nvim_create_autocmd(\"BufLeave\", {\n  group = group,\n  pattern = \"*\", -- check all buffers\n  callback = function(opts)\n    local ft = vim.bo[opts.buf].filetype\n    if ft == \"snacks_input\" then\n      vim.api.nvim_exec_autocmds(\"User\", { pattern = \"SnacksInputLeave\" })\n      -- print(\"snacks input leave\")\n    end\n  end,\n})\n\n-- Disable auto-save when entering a snacks_input buffer\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"snacks_picker_input\",\n  group = group,\n  callback = function()\n    vim.api.nvim_exec_autocmds(\"User\", { pattern = \"SnacksPickerInputEnter\" })\n    -- print(\"snacks picker input enter\")\n  end,\n})\n\n-- Re-enable auto-save when leaving that buffer\nvim.api.nvim_create_autocmd(\"BufLeave\", {\n  group = group,\n  pattern = \"*\", -- check all buffers\n  callback = function(opts)\n    local ft = vim.bo[opts.buf].filetype\n    if ft == \"snacks_picker_input\" then\n      vim.api.nvim_exec_autocmds(\"User\", { pattern = \"SnacksPickerInputLeave\" })\n      -- print(\"snacks picker input leave\")\n    end\n  end,\n})\n\n-- -- I just needed to see all of the events happening when troubleshooting the\n-- -- keymap to paste images in the assets directory\n-- local debug_group = vim.api.nvim_create_augroup(\"debug_events\", { clear = true })\n--\n-- local debug_events = {\n--   \"BufEnter\",\n--   \"BufLeave\",\n--   \"FileType\",\n--   \"FocusLost\",\n--   \"FocusGained\",\n--   \"InsertEnter\",\n--   \"InsertLeave\",\n--   \"ModeChanged\",\n--   \"QuitPre\",\n--   \"TextChanged\",\n--   \"WinEnter\",\n--   \"WinLeave\",\n--   -- ... add any you suspect\n-- }\n--\n-- for _, evt in ipairs(debug_events) do\n--   vim.api.nvim_create_autocmd(evt, {\n--     group = debug_group,\n--     pattern = \"*\",\n--     callback = function(opts)\n--       -- Just print or log it somewhere\n--       local msg = string.format(\n--         \"DEBUG EVENT: %s -\u003e Buf=%d FileType=%s\",\n--         evt,\n--         opts.buf,\n--         vim.api.nvim_get_option_value(\"filetype\", { buf = opts.buf })\n--       )\n--       print(msg)\n--       -- or write to a file if needed\n--     end,\n--   })\n-- end\n\nreturn {\n  {\n    \"okuuva/auto-save.nvim\",\n    enabled = true,\n    cmd = \"ASToggle\", -- optional for lazy loading on command\n    event = { \"InsertLeave\", \"TextChanged\" }, -- optional for lazy loading on trigger events\n    opts = {\n      enabled = true, -- start auto-save when the plugin is loaded (i.e. when your package manager loads it)\n      trigger_events = { -- See :h events\n        -- -- vim events that trigger an immediate save\n        -- -- I'm disabling this, as it's autosaving when I leave the buffer and\n        -- -- that's autoformatting stuff if on insert mode and following a tutorial\n        -- -- Re-enabling this to only save if NOT in insert mode in the condition below\n        -- immediate_save = { nil },\n        immediate_save = { \"BufLeave\", \"FocusLost\", \"QuitPre\", \"VimSuspend\" }, -- vim events that trigger an immediate save\n        -- vim events that trigger a deferred save (saves after `debounce_delay`)\n        defer_save = {\n          \"InsertLeave\",\n          \"TextChanged\",\n          { \"User\", pattern = \"VisualLeave\" },\n          { \"User\", pattern = \"FlashJumpEnd\" },\n          { \"User\", pattern = \"SnacksInputLeave\" },\n          { \"User\", pattern = \"SnacksPickerInputLeave\" },\n        },\n        cancel_deferred_save = {\n          \"InsertEnter\",\n          { \"User\", pattern = \"VisualEnter\" },\n          { \"User\", pattern = \"FlashJumpStart\" },\n          { \"User\", pattern = \"SnacksInputEnter\" },\n          { \"User\", pattern = \"SnacksPickerInputEnter\" },\n        },\n      },\n      -- function that takes the buffer handle and determines whether to save the current buffer or not\n      -- return true: if buffer is ok to be saved\n      -- return false: if it's not ok to be saved\n      -- if set to `nil` then no specific condition is applied\n      condition = function(buf)\n        -- Do not save when I'm in insert mode\n        -- Do NOT ADD VISUAL MODE HERE or the cancel_deferred_save wont' work\n        -- If I STAY in insert mode and switch to another app, like YouTube to\n        -- take notes, the BufLeave or FocusLost immediate_save will be ignored\n        -- and the save will not be triggered\n        local mode = vim.fn.mode()\n        if mode == \"i\" then\n          return false\n        end\n\n        -- Disable auto-save for the harpoon plugin, otherwise it just opens and closes\n        -- https://github.com/ThePrimeagen/harpoon/issues/434\n        --\n        -- don't save for `sql` file types\n        -- I do this so when working with dadbod the file is not saved every time\n        -- I make a change, and a SQL query executed\n        -- Run `:set filetype?` on a dadbod query to make sure of the filetype\n        local filetype = vim.bo[buf].filetype\n        if filetype == \"harpoon\" or filetype == \"mysql\" then\n          return false\n        end\n\n        -- Skip autosave if you're in an active snippet\n        if require(\"luasnip\").in_snippet() then\n          return false\n        end\n\n        return true\n      end,\n      write_all_buffers = false, -- write all buffers when the current one meets `condition`\n      -- Do not execute autocmds when saving\n      -- If you set noautocmd = true, autosave won't trigger an auto format\n      -- https://github.com/okuuva/auto-save.nvim/issues/55\n      noautocmd = false,\n      lockmarks = false, -- lock marks when saving, see `:h lockmarks` for more details\n      -- delay after which a pending save is executed (default 1000)\n      debounce_delay = 2000,\n      -- log debug messages to 'auto-save.log' file in neovim cache directory, set to `true` to enable\n      debug = false,\n    },\n  },\n}\n","recorded":"2025-09-26 16:44:06.986445352","filePath":"null","pinned":false},{"value":"-- https://github.com/okuuva/auto-save.nvim\n--\n-- This is a fork of original plugin `https://github.com/pocco81/auto-save.nvim`\n-- but the original one was updated 2 years ago, and I was experiencing issues\n-- with autoformat and undo/redo\n--\n-- Filename: ~/github/dotfiles-latest/neovim/neobean/lua/plugins/auto-save.lua\n-- ~/github/dotfiles-latest/neovim/neobean/lua/plugins/auto-save.lua\n\n-- My related YouTube video\n-- Save neovim files automatically with auto-save.nvim\n-- https://youtu.be/W5fjlU4tSpw\n\n-- I had undo/redo issues when using the no longer maintained plugin from pocco81\n-- So make sure you're using the right plugin, which is okuuva/auto-save.nvim\n-- https://github.com/pocco81/auto-save.nvim/issues/70\n\n","recorded":"2025-09-26 16:44:02.334148582","filePath":"null","pinned":false},{"value":"## hello\n- Hello there\n    - hello there\n\n\n## hello\n- Hello there\n    - hello there\n\n\n","recorded":"2025-09-26 16:40:44.385710567","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  -- Move to the top of the file without adding to jumplist\n  vim.cmd(\"keepjumps normal! gg\")\n  -- Get the total number of lines\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    -- Get the content of the current line\n    local line_content = vim.fn.getline(line)\n    -- \"^\" -\u003e Ensures the match is at the start of the line\n    -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n    -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n    -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      -- Move the cursor to the current line without adding to jumplist\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      -- Check if the current line has a fold level \u003e 0\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        -- Fold the heading if it matches the level\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n        -- else\n        --   vim.notify(\"No fold at line \" .. line, vim.log.levels.WARN)\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  -- I save the view to know where to jump back after folding\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  -- Restore the view to jump to where I was\n  vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfj\", function()\n  -- Reloads the file to refresh folds, otheriise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfk\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfl\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emf;\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Use \u003cCR\u003e to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  -- Get the current line number\n  local line = vim.fn.line(\".\")\n  -- Get the fold level of the current line\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from \u003cleader\u003emfj to\n-- zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfu\", function()\n  -- Reloads the file to reflect the changes\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\") -- Unfold all headings\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- gk jummps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- Difference between normal and normal!\n  -- - `normal` executes the command and respects any mappings that might be defined.\n  -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n  vim.cmd(\"normal gk\")\n  -- This is to fold the line under the cursor\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n\n","recorded":"2025-09-26 16:37:22.481565693","filePath":"null","pinned":false},{"value":"-- Folding section\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n    local lnum = vim.v.lnum\n    local line = vim.fn.getline(lnum)\n    local heading = line:match(\"^(#+)%s\")\n    if heading then\n        local level = #heading\n        if level == 1 then\n            if lnum == 1 then\n                return \"\u003e1\"\n            else\n                local frontmatter_end = vim.b.frontmatter_end\n                if frontmatter_end and (lnum == frontmatter_end + 1) then\n                    return \"\u003e1\"\n                end\n            end\n        elseif level \u003e= 2 and level \u003c= 6 then\n            return \"\u003e\" .. level\n        end\n    else\n        -- Check for blank lines to act as fold separators\n        if line:match(\"^%s*$\") then\n            local prev_level = vim.fn.foldlevel(lnum - 1)\n            if prev_level \u003e 0 then\n                return \"\u003c\" .. prev_level -- Close the previous fold before the blank line\n            end\n        end\n    end\n    return \"=\"\nend\n\nlocal function set_markdown_folding()\n    vim.opt_local.foldmethod = \"expr\"\n    vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n    vim.opt_local.foldlevel = 99\n    -- Detect frontmatter closing line\n    local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n    local found_first = false\n    local frontmatter_end = nil\n    for i, line in ipairs(lines) do\n        if line == \"---\" then\n            if not found_first then\n                found_first = true\n            else\n                frontmatter_end = i\n                break\n            end\n        end\n    end\n    vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n    pattern = \"markdown\",\n    callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n    -- Move to the top of the file without adding to jumplist\n    vim.cmd(\"keepjumps normal! gg\")\n    -- Get the total number of lines\n    local total_lines = vim.fn.line(\"$\")\n    for line = 1, total_lines do\n        -- Get the content of the current line\n        local line_content = vim.fn.getline(line)\n        -- \"^\" -\u003e Ensures the match is at the start of the line\n        -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n        -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n        -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n        if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n            -- Move the cursor to the current line without adding to jumplist\n            vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n            -- Check if the current line has a fold level \u003e 0\n            local current_foldlevel = vim.fn.foldlevel(line)\n            if current_foldlevel \u003e 0 then\n                -- Fold the heading if it matches the level\n                if vim.fn.foldclosed(line) == -1 then\n                    vim.cmd(\"normal! za\")\n                end\n            end\n        end\n    end\nend\n\nlocal function fold_markdown_headings(levels)\n    -- I save the view to know where to jump back after folding\n    local saved_view = vim.fn.winsaveview()\n    for _, level in ipairs(levels) do\n        fold_headings_of_level(level)\n    end\n    vim.cmd(\"nohlsearch\")\n    -- Restore the view to jump to where I was\n    vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n    vim.cmd(\"edit!\")\n    -- Unfold everything first or I had issues\n    vim.cmd(\"normal! zR\")\n    fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n    vim.cmd(\"edit!\")\n    -- Unfold everything first or I had issues\n    vim.cmd(\"normal! zR\")\n    fold_markdown_headings({ 6, 5, 4, 3, 2 })\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n    vim.cmd(\"edit!\")\n    -- Unfold everything first or I had issues\n    vim.cmd(\"normal! zR\")\n    fold_markdown_headings({ 6, 5, 4, 3 })\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n    vim.cmd(\"edit!\")\n    -- Unfold everything first or I had issues\n    vim.cmd(\"normal! zR\")\n    fold_markdown_headings({ 6, 5, 4 })\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Use to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\", function()\n    -- Get the current line number\n    local line = vim.fn.line(\".\")\n    -- Get the fold level of the current line\n    local foldlevel = vim.fn.foldlevel(line)\n    if foldlevel == 0 then\n        vim.notify(\"No fold found\", vim.log.levels.INFO)\n    else\n        vim.cmd(\"normal! za\")\n        vim.cmd(\"normal! zz\") -- center the cursor line on screen\n    end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from mfj to zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Reloads the file to reflect the changes\n    vim.cmd(\"edit!\")\n    vim.cmd(\"normal! zR\") -- Unfold all headings\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n-- gk jumps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n    -- \"Update\" saves only if the buffer has been modified since the last save\n    vim.cmd(\"silent update\")\n    -- Difference between normal and normal!\n    -- - `normal` executes the command and respects any mappings that might be defined.\n    -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n    vim.cmd(\"normal gk\")\n    -- This is to fold the line under the cursor\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n-- End Folding section","recorded":"2025-09-26 16:37:16.162321652","filePath":"null","pinned":false},{"value":"mkdir -p ~/Pictures\n","recorded":"2025-09-26 16:28:07.759735642","filePath":"null","pinned":false},{"value":"bind = $mainMod, Print, exec, grim ~/Pictures/screenshot-$(date +'%Y-%m-%d-%H%M%S').png\n\n# Screenshot selected area\nbind = $mainMod SHIFT, Print, exec, grim -g \"$(slurp)\" ~/Pictures/screenshot-$(date +'%Y-%m-%d-%H%M%S').png\n\n# Screenshot selected area to clipboard (no file saved)\nbind = $mainMod CTRL, Print, exec, grim -g \"$(slurp)\" - | wl-copy","recorded":"2025-09-26 16:27:16.047987834","filePath":"null","pinned":false},{"value":"sudo pacman -S grim slurp wl-clipboard\n","recorded":"2025-09-26 16:27:00.708208706","filePath":"null","pinned":false},{"value":"# See https://wiki.hyprland.org/Configuring/Monitors/\nmonitor=,preferred,auto,auto\n\n# Source a file (multi-file configs)\n# source = ~/.config/hypr/myColors.conf\n\n\n\n#for kde apps you need to install: sudo pacman -S qt5ct qt6ct kvantum kvantum breeze-icons   \n#you will need to set dark theme for qt apps from kde more difficult thans with gnome :D:\nenv = QT_QPA_PLATFORMTHEME,qt5ct\nenv = QT_QPA_PLATFORMTHEME,qt6ct\n\n\n\n# Some default env vars.\nenv = GDK_BACKEND=wayland\nenv = QT_QPA_PLATFORM,wayland\nenv = SDL_VIDEODRIVER,wayland\nenv = CLUTTER_BACKEND,wayland\nenv = XDG_CURRENT_DESKTOP,Hyprland\nenv = XDG_SESSION_TYPE,wayland\nenv = XDG_SESSION_DESKTOP,Hyprland\nenv = QT_AUTO_SCREEN_SCALE_FACTOR,1\nenv = QT_QPA_PLATFORM,wayland;xcb\nenv = QT_WAYLAND_DISABLE_WINDOWDECORATION,1\nenv = GTK_IM_MODULE=fcitx\nenv =QT_IM_MODULE=fcitx\nenv =XMODIFIERS=@im=fcitx\nenv =SDL_IM_MODULE=fcitx\nenv =GLFW_IM_MODULE=ibus\n\n\n# Nvidia\nenv = LIBVA_DRIVER_NAME,nvidia\nenv = __GLX_VENDOR_LIBIRARY_NAME,nvidia\nenv = NVD_BACKEND,direct\nenv = ELECTRON_OZONE_PLATFORM_HINT,auto\n\nenv = GTK_THEME,catppuccin-mocha-lavender-standard+default\n\n\n# Execute your favorite apps at launch\nexec-once = swww init\nexec-once = waypaper --restore\nexec-once = waybar\nexec-once = clipse -listen\nexec-once = fcitx5 -d\n\nexec-once = gsettings set org.gnome.desktop.interface gtk-theme \"catppuccin-mocha-lavender-standard+default\"\nexec-once = gsettings set org.gnome.desktop.interface color-scheme \"prefer-dark\"\n\nwindowrulev2 = float, class:(clipse)\nwindowrulev2 = size 622 652, class:(clipse)\nwindowrulev2 = stayfocused, class:(clipse)\n\n\n################\n### MONITORS ###\n################\n\n# See https://wiki.hyprland.org/Configuring/Monitors/\nmonitor=,preferred,auto,auto\n\n\n###################\n### MY PROGRAMS ###\n###################\n\n# See https://wiki.hyprland.org/Configuring/Keywords/\n\n# Set programs that you use\n$terminal = kitty\n$fileManager = dolphin\n$menu = wofi --show drun\n\n#############################\n### ENVIRONMENT VARIABLES ###\n#############################\n\n# See https://wiki.hypr.land/Configuring/Environment-variables/\n\nenv = XCURSOR_SIZE,24\nenv = HYPRCURSOR_SIZE,24\n\n\n###################\n### PERMISSIONS ###\n###################\n\n# See https://wiki.hypr.land/Configuring/Permissions/\n# Please note permission changes here require a Hyprland restart and are not applied on-the-fly\n# for security reasons\n\n# ecosystem {\n#   enforce_permissions = 1\n# }\n\n# permission = /usr/(bin|local/bin)/grim, screencopy, allow\n# permission = /usr/(lib|libexec|lib64)/xdg-desktop-portal-hyprland, screencopy, allow\n# permission = /usr/(bin|local/bin)/hyprpm, plugin, allow\n\n\n#####################\n### LOOK AND FEEL ###\n#####################\n\n# Refer to https://wiki.hypr.land/Configuring/Variables/\n\n# https://wiki.hypr.land/Configuring/Variables/#general\ngeneral {\n    gaps_in = 5\n    gaps_out = 5\n\n    border_size = 2\n\n    # https://wiki.hypr.land/Configuring/Variables/#variable-types for info about colors\n    col.active_border = rgba(33ccffee) rgba(00ff99ee) 45deg\n    col.inactive_border = rgba(595959aa)\n\n    # Set to true enable resizing windows by clicking and dragging on borders and gaps\n    resize_on_border = false\n\n    # Please see https://wiki.hypr.land/Configuring/Tearing/ before you turn this on\n    allow_tearing = false\n\n    layout = dwindle\n}\n\n# https://wiki.hypr.land/Configuring/Variables/#decoration\ndecoration {\n    rounding = 8\n    rounding_power = 2\n\n    # Change transparency of focused and unfocused windows\n    active_opacity = 1.0\n    inactive_opacity = 1.0\n\n    shadow {\n        enabled = true\n        range = 4\n        render_power = 3\n        color = rgba(1a1a1aee)\n    }\n\n    # https://wiki.hypr.land/Configuring/Variables/#blur\n    blur {\n        enabled = true\n        size = 3\n        passes = 1\n\n        vibrancy = 0.1696\n    }\n}\n\n# https://wiki.hypr.land/Configuring/Variables/#animations\nanimations {\n    enabled = yes, please :)\n\n    # Default curves, see https://wiki.hypr.land/Configuring/Animations/#curves\n    #        NAME,           X0,   Y0,   X1,   Y1\n    bezier = easeOutQuint,   0.23, 1,    0.32, 1\n    bezier = easeInOutCubic, 0.65, 0.05, 0.36, 1\n    bezier = linear,         0,    0,    1,    1\n    bezier = almostLinear,   0.5,  0.5,  0.75, 1\n    bezier = quick,          0.15, 0,    0.1,  1\n\n    # Default animations, see https://wiki.hypr.land/Configuring/Animations/\n    #           NAME,          ONOFF, SPEED, CURVE,        [STYLE]\n    animation = global,        1,     10,    default\n    animation = border,        1,     5.39,  easeOutQuint\n    animation = windows,       1,     4.79,  easeOutQuint\n    animation = windowsIn,     1,     4.1,   easeOutQuint, popin 87%\n    animation = windowsOut,    1,     1.49,  linear,       popin 87%\n    animation = fadeIn,        1,     1.73,  almostLinear\n    animation = fadeOut,       1,     1.46,  almostLinear\n    animation = fade,          1,     3.03,  quick\n    animation = layers,        1,     3.81,  easeOutQuint\n    animation = layersIn,      1,     4,     easeOutQuint, fade\n    animation = layersOut,     1,     1.5,   linear,       fade\n    animation = fadeLayersIn,  1,     1.79,  almostLinear\n    animation = fadeLayersOut, 1,     1.39,  almostLinear\n    animation = workspaces,    1,     1.94,  almostLinear, fade\n    animation = workspacesIn,  1,     1.21,  almostLinear, fade\n    animation = workspacesOut, 1,     1.94,  almostLinear, fade\n    animation = zoomFactor,    1,     7,     quick\n}\n\n# Ref https://wiki.hypr.land/Configuring/Workspace-Rules/\n# \"Smart gaps\" / \"No gaps when only\"\n# uncomment all if you wish to use that.\n# workspace = w[tv1], gapsout:0, gapsin:0\n# workspace = f[1], gapsout:0, gapsin:0\n# windowrule = bordersize 0, floating:0, onworkspace:w[tv1]\n# windowrule = rounding 0, floating:0, onworkspace:w[tv1]\n# windowrule = bordersize 0, floating:0, onworkspace:f[1]\n# windowrule = rounding 0, floating:0, onworkspace:f[1]\n\n# See https://wiki.hypr.land/Configuring/Dwindle-Layout/ for more\ndwindle {\n    pseudotile = true # Master switch for pseudotiling. Enabling is bound to mainMod + P in the keybinds section below\n    preserve_split = true # You probably want this\n}\n\n# See https://wiki.hypr.land/Configuring/Master-Layout/ for more\nmaster {\n    new_status = master\n}\n\n# https://wiki.hypr.land/Configuring/Variables/#misc\nmisc {\n    force_default_wallpaper = 0 # Set to 0 or 1 to disable the anime mascot wallpapers\n    disable_hyprland_logo = true # If true disables the random hyprland logo / anime girl background. :(\n}\n\n\n#############\n### INPUT ###\n#############\ninput {\n    kb_layout = us,ara\n    kb_variant =\n    kb_model =\n    kb_options =\n}\n\n\n# See https://wiki.hypr.land/Configuring/Gestures\ngesture = 3, horizontal, workspace\n\n# Example per-device config\ndevice {\n    name = epic-mouse-v1\n    sensitivity = -0.5\n}\n\n\n####################\n### KEYBINDINGSS ###\n####################\n\n# See https://wiki.hyprland.org/Configuring/Keywords/\n$mainMod = SUPER # Sets \"Windows\" key as main modifier\n\n# Example binds, see https://wiki.hyprland.org/Configuring/Binds/ for more\nbind = $mainMod, Return, exec, $terminal\nbind = $mainMod, Q, killactive,\nbind = $mainMod, M, exit,\nbind = $mainMod, E, exec, thunar\nbind = $mainMod, V, togglefloating,\nbind = $mainMod, P, exec, $menu\n# bind = $mainMod, P, pseudo, # dwindle\nbind = $mainMod, J, togglesplit, # dwindle\n\n# Move focus with mainMod + arrow keys\nbind = $mainMod, left, movefocus, l\nbind = $mainMod, right, movefocus, r\nbind = $mainMod, up, movefocus, u\nbind = $mainMod, down, movefocus, d\n\n# Switch workspaces with mainMod + [0-9]\nbind = $mainMod, 1, workspace, 1\nbind = $mainMod, 2, workspace, 2\nbind = $mainMod, 3, workspace, 3\nbind = $mainMod, 4, workspace, 4\nbind = $mainMod, 5, workspace, 5\nbind = $mainMod, 6, workspace, 6\nbind = $mainMod, 7, workspace, 7\nbind = $mainMod, 8, workspace, 8\nbind = $mainMod, 9, workspace, 9\nbind = $mainMod, 0, workspace, 10\n\n# Move active window to a workspace with mainMod + SHIFT + [0-9]\nbind = $mainMod SHIFT, 1, movetoworkspace, 1\nbind = $mainMod SHIFT, 2, movetoworkspace, 2\nbind = $mainMod SHIFT, 3, movetoworkspace, 3\nbind = $mainMod SHIFT, 4, movetoworkspace, 4\nbind = $mainMod SHIFT, 5, movetoworkspace, 5\nbind = $mainMod SHIFT, 6, movetoworkspace, 6\nbind = $mainMod SHIFT, 7, movetoworkspace, 7\nbind = $mainMod SHIFT, 8, movetoworkspace, 8\nbind = $mainMod SHIFT, 9, movetoworkspace, 9\nbind = $mainMod SHIFT, 0, movetoworkspace, 10\n\n# Example special workspace (scratchpad)\nbind = $mainMod, S, togglespecialworkspace, magic\nbind = $mainMod SHIFT, S, movetoworkspace, special:magic\n\n# Scroll through existing workspaces with mainMod + scroll\nbind = $mainMod, mouse_down, workspace, e+1\nbind = $mainMod, mouse_up, workspace, e-1\n\n# Move/resize windows with mainMod + LMB/RMB and dragging\nbindm = $mainMod, mouse:272, movewindow\nbindm = $mainMod, mouse:273, resizewindow\n\n# Brightness controls\nbind = , XF86MonBrightnessUp, exec, brightnessctl set +10%\nbind = , XF86MonBrightnessDown, exec, brightnessctl set 10%-\n\n# Volume controls\nbind = , XF86AudioRaiseVolume, exec, pamixer -i 5\nbind = , XF86AudioLowerVolume, exec, pamixer -d 5\nbind = , XF86AudioMute, exec, pamixer -t\n\n\nbind = $mainMod SHIFT, V, exec, alacritty --class clipse -e clipse\n\n#clipse shortcut\nbind = SUPER, grave, exec, kitty -e clipse\n##############################\n### WINDOWS AND WORKSPACES ###\n##############################\n\n# See https://wiki.hypr.land/Configuring/Window-Rules/ for more\n# See https://wiki.hypr.land/Configuring/Workspace-Rules/ for workspace rules\n\n# Example windowrule\n# windowrule = float,class:^(kitty)$,title:^(kitty)$\n\n# Ignore maximize requests from apps. You'll probably like this.\nwindowrule = suppressevent maximize, class:.*\n\n# Fix some dragging issues with XWayland\nwindowrule = nofocus,class:^$,title:^$,xwayland:1,floating:1,fullscreen:0,pinned:0\n","recorded":"2025-09-26 16:26:26.884119602","filePath":"null","pinned":false},{"value":"exec-once = sxhkd\n","recorded":"2025-09-26 16:26:23.295794486","filePath":"null","pinned":false},{"value":"waybar","recorded":"2025-09-26 16:24:34.232513591","filePath":"null","pinned":false},{"value":"exec-once = waybar\n","recorded":"2025-09-26 16:24:31.865550306","filePath":"null","pinned":false},{"value":"### hello\n\n- Hello there\n    - hello there\n\n#### hello\n\n- Hello there\n    - hello there\n\n\n# hello ooooooooooooooooooosssssssssssssiiiiiiii\nHello there\n","recorded":"2025-09-26 16:21:37.673981895","filePath":"null","pinned":false},{"value":"# hello ooooooooooooooooooosssssssssssssiiiiiiii\n\nHello there\n","recorded":"2025-09-26 16:21:31.310901772","filePath":"null","pinned":false},{"value":"-- Custom foldtext that adds a blank line between folds\nfunction _G.custom_foldtext()\n  local line = vim.fn.getline(vim.v.foldstart)\n  local fold_size = vim.v.foldend - vim.v.foldstart + 1\n  -- Heading line + size + padding\n  return line .. string.rep(\" \", 3) .. (\"  %d lines \"):format(fold_size)\nend\n\nvim.opt.foldtext = \"v:lua.custom_foldtext()\"","recorded":"2025-09-26 16:15:59.409022584","filePath":"null","pinned":false},{"value":"-- Custom foldtext that adds a blank line between folds\nfunction _G.custom_foldtext()\n  local line = vim.fn.getline(vim.v.foldstart)\n  local fold_size = vim.v.foldend - vim.v.foldstart + 1\n  -- Heading line + size + padding\n  return line .. string.rep(\" \", 3) .. (\"  %d lines \"):format(fold_size)\nend","recorded":"2025-09-26 16:15:35.332770512","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level and insert blank line\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  local line = 1\n  while line \u003c= total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\") -- Fold the heading\n          -- Insert a blank line after the heading if one doesn't exist\n          local next_line = line + 1\n          if next_line \u003c= total_lines then\n            local next_line_content = vim.fn.getline(next_line)\n            if next_line_content ~= \"\" then\n              vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n              total_lines = total_lines + 1\n              line = line + 1\n            end\n          else\n            -- At end of file, append a blank line\n            vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n            total_lines = total_lines + 1\n            line = line + 1\n          end\n        end\n      end\n    end\n    line = line + 1\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to fold when in normal mode\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- gk jumps to the markdown heading above and then folds it\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 16:11:46.874312805","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  -- Move to the top of the file without adding to jumplist\n  vim.cmd(\"keepjumps normal! gg\")\n  -- Get the total number of lines\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    -- Get the content of the current line\n    local line_content = vim.fn.getline(line)\n    -- \"^\" -\u003e Ensures the match is at the start of the line\n    -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n    -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n    -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      -- Move the cursor to the current line without adding to jumplist\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      -- Check if the current line has a fold level \u003e 0\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        -- Fold the heading if it matches the level\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n        -- else\n        --   vim.notify(\"No fold at line \" .. line, vim.log.levels.WARN)\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  -- I save the view to know where to jump back after folding\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  -- Restore the view to jump to where I was\n  vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfj\", function()\n  -- Reloads the file to refresh folds, otheriise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfk\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfl\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emf;\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Use \u003cCR\u003e to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  -- Get the current line number\n  local line = vim.fn.line(\".\")\n  -- Get the fold level of the current line\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from \u003cleader\u003emfj to\n-- zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfu\", function()\n  -- Reloads the file to reflect the changes\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\") -- Unfold all headings\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- gk jummps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- Difference between normal and normal!\n  -- - `normal` executes the command and respects any mappings that might be defined.\n  -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n  vim.cmd(\"normal gk\")\n  -- This is to fold the line under the cursor\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 16:11:41.960121847","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level and insert blank line\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  local line = 1\n  while line \u003c= total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\") -- Fold the heading\n          -- Ensure exactly one blank line after the heading\n          local next_line = line + 1\n          local next_next_line = line + 2\n          if next_line \u003c= total_lines then\n            local next_line_content = vim.fn.getline(next_line)\n            if next_line_content ~= \"\" then\n              -- Insert a blank line if the next line is not empty\n              vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n              total_lines = total_lines + 1\n              line = line + 1\n            elseif next_next_line \u003c= total_lines and vim.fn.getline(next_next_line) == \"\" then\n              -- Remove extra blank line if there are two or more\n              vim.api.nvim_buf_set_lines(0, next_line, next_line + 1, false, {})\n              total_lines = total_lines - 1\n            end\n          else\n            -- At end of file, append a blank line\n            vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n            total_lines = total_lines + 1\n            line = line + 1\n          end\n        end\n      end\n    end\n    line = line + 1\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to fold when in normal mode\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings and cleaning up extra blank lines\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  -- Remove extra blank lines after headings\n  local total_lines = vim.fn.line(\"$\")\n  local line = 1\n  while line \u003c= total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^#+%s\") then\n      local next_line = line + 1\n      if next_line \u003c= total_lines and vim.fn.getline(next_line) == \"\" then\n        local next_next_line = next_line + 1\n        if next_next_line \u003c= total_lines and vim.fn.getline(next_next_line) == \"\" then\n          vim.api.nvim_buf_set_lines(0, next_line, next_next_line, false, {})\n          total_lines = total_lines - 1\n        else\n          line = line + 1\n        end\n      else\n        line = line + 1\n      end\n    else\n      line = line + 1\n    end\n  end\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- gk jumps to the markdown heading above and then folds it\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal","recorded":"2025-09-26 16:10:02.396477587","filePath":"null","pinned":false},{"value":"# hello ooooooooooooooooooosssssssssssssiiiiiiii\nHello there\n","recorded":"2025-09-26 16:08:30.729672016","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Custom foldtext function to add visual separation\nlocal function markdown_foldtext()\n  local foldstart = vim.v.foldstart\n  local line = vim.fn.getline(foldstart)\n  local heading = line:match(\"^(#+)%s+(.+)\")\n  if heading then\n    local level = #heading[1]\n    local text = heading[2]\n    -- Add extra spaces to simulate separation; adjust number for more \"space\"\n    return string.format(\"%s %s  \", string.rep(\"#\", level), text)\n  end\n  return vim.fn.foldtext()\nend\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n  vim.opt_local.foldtext = \"v:lua.markdown_foldtext()\" -- Set custom foldtext\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to fold when in normal mode\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- gk jumps to the markdown heading above and then folds it\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 16:07:44.987052895","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level and insert blank line\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  local line = 1\n  while line \u003c= total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\") -- Fold the heading\n          -- Insert a blank line after the heading if one doesn't exist\n          local next_line = line + 1\n          if next_line \u003c= total_lines then\n            local next_line_content = vim.fn.getline(next_line)\n            if next_line_content ~= \"\" then\n              vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n              total_lines = total_lines + 1\n              line = line + 1\n            end\n          else\n            -- At end of file, append a blank line\n            vim.api.nvim_buf_set_lines(0, line, line, false, { \"\" })\n            total_lines = total_lines + 1\n            line = line + 1\n          end\n        end\n      end\n    end\n    line = line + 1\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to fold when in normal mode\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- gk jumps to the markdown heading above and then folds it\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------","recorded":"2025-09-26 16:07:30.884903343","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Custom foldtext function to add visual separation\nlocal function markdown_foldtext()\n  local foldstart = vim.v.foldstart\n  local line = vim.fn.getline(foldstart)\n  local heading = line:match(\"^(#+)%s+(.+)\")\n  if heading then\n    local level = #heading[1]\n    local text = heading[2]\n    -- Add extra spaces to simulate separation; adjust number for more \"space\"\n    return string.format(\"%s %s  \", string.rep(\"#\", level), text)\n  end\n  return vim.fn.foldtext()\nend\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n  vim.opt_local.foldtext = \"v:lua.markdown_foldtext()\" -- Set custom foldtext\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to fold when in normal mode\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- gk jumps to the markdown heading above and then folds it\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------","recorded":"2025-09-26 16:04:32.132594093","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Custom foldtext function to show the full heading line\nfunction _G.markdown_foldtext()\n  local lnum = vim.v.foldstart\n  local line = vim.fn.getline(lnum)\n  return line -- Return the full line of the fold start (the heading)\nend\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n  vim.opt_local.foldtext = \"v:lua.markdown_foldtext()\" -- Set custom foldtext for markdown\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to toggle fold\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- Keymap to fold the heading under the cursor\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 16:02:20.101885835","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Custom foldtext function to show the full heading line\nfunction _G.markdown_foldtext()\n  local lnum = vim.v.foldstart\n  local line = vim.fn.getline(lnum)\n  return line -- Return the full line of the fold start (the heading)\nend\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n  vim.opt_local.foldtext = \"v:lua.markdown_foldtext()\" -- Set custom foldtext for markdown\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  vim.cmd(\"keepjumps normal! gg\")\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    local line_content = vim.fn.getline(line)\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  vim.fn.winrestview(saved_view)\nend\n\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- Keymap for folding markdown headings of level 2 or above\nvim.keymap.set(\"n\", \"zk\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- Use \u003cCR\u003e to toggle fold\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  local line = vim.fn.line(\".\")\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\")\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- Keymap for unfolding markdown headings\nvim.keymap.set(\"n\", \"zu\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- Keymap to fold the heading under the cursor\nvim.keymap.set(\"n\", \"zi\", function()\n  vim.cmd(\"silent update\")\n  vim.cmd(\"normal gk\")\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\")\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------","recorded":"2025-09-26 16:00:19.509964364","filePath":"null","pinned":false},{"value":"z","recorded":"2025-09-26 15:55:05.488320203","filePath":"null","pinned":false},{"value":"- Hello there","recorded":"2025-09-26 15:53:01.308683619","filePath":"null","pinned":false},{"value":"- Hello there\n    - hello there\n","recorded":"2025-09-26 15:52:52.014266683","filePath":"null","pinned":false},{"value":"#","recorded":"2025-09-26 15:52:40.992041028","filePath":"null","pinned":false},{"value":"### hello\n","recorded":"2025-09-26 15:52:21.282805238","filePath":"null","pinned":false},{"value":"#### hello\n- Hello there\n    - hello there\n","recorded":"2025-09-26 15:52:11.494645011","filePath":"null","pinned":false},{"value":"### hello\n- Hello there\n    - hello there\n\n#### hello\n- Hello there\n    - hello there\n","recorded":"2025-09-26 15:52:10.394177655","filePath":"null","pinned":false},{"value":"## hello\n- Hello there\n    - hello there\n","recorded":"2025-09-26 15:51:33.259695166","filePath":"null","pinned":false},{"value":"# hello\nHello there\n","recorded":"2025-09-26 15:50:59.475675606","filePath":"null","pinned":false},{"value":"# hello\n    Hello there\n","recorded":"2025-09-26 15:49:45.041406184","filePath":"null","pinned":false},{"value":"sk\n","recorded":"2025-09-26 15:49:20.418388334","filePath":"null","pinned":false},{"value":"k","recorded":"2025-09-26 15:49:17.951113462","filePath":"null","pinned":false},{"value":"\n### hello\nHello there\n\n#### Hello\nHello there\n\n","recorded":"2025-09-26 15:48:57.888384528","filePath":"null","pinned":false},{"value":"\n##### Hello\nHello there\n\n###### Hello\nHello there\n","recorded":"2025-09-26 15:48:52.908917161","filePath":"null","pinned":false},{"value":"#### Hello\nHello there\n","recorded":"2025-09-26 15:48:28.447432011","filePath":"null","pinned":false},{"value":"Hello there\n\n","recorded":"2025-09-26 15:48:07.996173134","filePath":"null","pinned":false},{"value":"Hello there\n","recorded":"2025-09-26 15:47:57.148945979","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Basic folding setup for non-markdown files\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Treesitter folding for non-markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\" },\n  callback = function()\n    vim.wo.foldmethod = \"expr\"\n    vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.wo.foldlevel = 99\n    vim.wo.foldlevelstart = 99\n  end,\n})\n\n-- Load custom markdown folding configuration\nrequire(\"markdown-folding\")\n\n-- General folding keymaps (for non-markdown files)\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n","recorded":"2025-09-26 15:46:40.142958811","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\",\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\nrequire(\"markdown-folding\") -- Assumes markdown-folding.lua is in ~/.config/nvim/lua/\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Basic folding setup for non-markdown files\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Treesitter folding for non-markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\" },\n  callback = function()\n    vim.wo.foldmethod = \"expr\"\n    vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.wo.foldlevel = 99\n    vim.wo.foldlevelstart = 99\n  end,\n})\n\n-- General folding keymaps (for non-markdown files)\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })","recorded":"2025-09-26 15:46:35.029725676","filePath":"null","pinned":false},{"value":"plugins.markdown-folding","recorded":"2025-09-26 15:46:05.159562477","filePath":"null","pinned":false},{"value":"Error detected while processing /home/alien/.config/nvim/init.lua:                                                                              \nE5113: Error while calling lua chunk: /home/alien/.config/nvim/init.lua:44: module 'markdown-folding' not found:                                \n        no field package.preload['markdown-folding']                                                                                            \n        cache_loader: module 'markdown-folding' not found                                                                                       \n        cache_loader_lib: module 'markdown-folding' not found                                                                                   \n        no file './markdown-folding.lua'                                                                                                        \n        no file '/usr/share/luajit-2.1/markdown-folding.lua'                                                                                    \n        no file '/usr/local/share/lua/5.1/markdown-folding.lua'                                                                                 \n        no file '/usr/local/share/lua/5.1/markdown-folding/init.lua'                                                                            \n        no file '/usr/share/lua/5.1/markdown-folding.lua'                                                                                       \n        no file '/usr/share/lua/5.1/markdown-folding/init.lua'                                                                                  \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/share/lua/5.1/markdown-folding.lua'                                    \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/share/lua/5.1/markdown-folding/init.lua'                               \n        no file './markdown-folding.so'                                                                                                         \n        no file '/usr/local/lib/lua/5.1/markdown-folding.so'                                                                                    \n        no file '/usr/lib/lua/5.1/markdown-folding.so'                                                                                          \n        no file '/usr/local/lib/lua/5.1/loadall.so'                                                                                             \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/lib/lua/5.1/markdown-folding.so'                                       \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/lib64/lua/5.1/markdown-folding.so'                                     \nstack traceback:                                                                                                                                \n        [C]: in function 'require'                                                                                                              \n        /home/alien/.config/nvim/init.lua:44: in main chunk","recorded":"2025-09-26 15:44:03.941646136","filePath":"null","pinned":false},{"value":"Error detected while processing /home/alien/.config/nvim/init.lua:                                                                              \nInvalid spec module: `plugins.markdown-folding`                                                                                                 \nExpected a `table` of specs, but a `nil` was returned instead                                                                                   \nE5113: Error while calling lua chunk: /home/alien/.config/nvim/init.lua:44: module 'markdown-folding' not found:                                \n        no field package.preload['markdown-folding']                                                                                            \n        cache_loader: module 'markdown-folding' not found                                                                                       \n        cache_loader_lib: module 'markdown-folding' not found                                                                                   \n        no file './markdown-folding.lua'                                                                                                        \n        no file '/usr/share/luajit-2.1/markdown-folding.lua'                                                                                    \n        no file '/usr/local/share/lua/5.1/markdown-folding.lua'                                                                                 \n        no file '/usr/local/share/lua/5.1/markdown-folding/init.lua'                                                                            \n        no file '/usr/share/lua/5.1/markdown-folding.lua'                                                                                       \n        no file '/usr/share/lua/5.1/markdown-folding/init.lua'                                                                                  \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/share/lua/5.1/markdown-folding.lua'                                    \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/share/lua/5.1/markdown-folding/init.lua'                               \n        no file './markdown-folding.so'                                                                                                         \n        no file '/usr/local/lib/lua/5.1/markdown-folding.so'                                                                                    \n        no file '/usr/lib/lua/5.1/markdown-folding.so'                                                                                          \n        no file '/usr/local/lib/lua/5.1/loadall.so'                                                                                             \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/lib/lua/5.1/markdown-folding.so'                                       \n        no file '/home/alien/.local/share/nvim/lazy-rocks/telescope.nvim/lib64/lua/5.1/markdown-folding.so'                                     \nstack traceback:                                                                                                                                \n        [C]: in function 'require'                                                                                                              \n        /home/alien/.config/nvim/init.lua:44: in main chunk","recorded":"2025-09-26 15:42:07.320220441","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Basic folding setup for non-markdown files\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Treesitter folding for non-markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\" },\n  callback = function()\n    vim.wo.foldmethod = \"expr\"\n    vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.wo.foldlevel = 99\n    vim.wo.foldlevelstart = 99\n  end,\n})\n\n-- Load custom markdown folding configuration\nrequire(\"markdown-folding\")\n\n-- General folding keymaps (for non-markdown files)\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })","recorded":"2025-09-26 15:40:43.341777281","filePath":"null","pinned":false},{"value":"local opts = { noremap = true, silent = true }\n\nlocal term_opts = { silent = true }\n\n-- Shorten function name\nlocal keymap = vim.api.nvim_set_keymap\n\n-- Normal --\n-- Better window navigation\nkeymap(\"n\", \"\u003cC-h\u003e\", \"\u003cC-w\u003eh\", opts)\nkeymap(\"n\", \"\u003cC-j\u003e\", \"\u003cC-w\u003ej\", opts)\nkeymap(\"n\", \"\u003cC-k\u003e\", \"\u003cC-w\u003ek\", opts)\nkeymap(\"n\", \"\u003cC-l\u003e\", \"\u003cC-w\u003el\", opts)\n\n-- Navigate buffers\nkeymap(\"n\", \"\u003cS-l\u003e\", \":bnext\u003cCR\u003e\", opts)\nkeymap(\"n\", \"\u003cS-h\u003e\", \":bprevious\u003cCR\u003e\", opts)\n\n-- Move text up and down\nkeymap(\"n\", \"\u003cA-j\u003e\", \"\u003cEsc\u003e:m .+1\u003cCR\u003e==gi\", opts)\nkeymap(\"n\", \"\u003cA-k\u003e\", \"\u003cEsc\u003e:m .-2\u003cCR\u003e==gi\", opts)\n\n-- Insert --\n-- Press jk fast to enter\nkeymap(\"i\", \"jk\", \"\u003cESC\u003e\", opts)\n\n-- Visual --\n-- Stay in indent mode\nkeymap(\"v\", \"\u003c\", \"\u003cgv\", opts)\nkeymap(\"v\", \"\u003e\", \"\u003egv\", opts)\n\n-- Move text up and down\nkeymap(\"v\", \"\u003cA-j\u003e\", \":m .+1\u003cCR\u003e==\", opts)\nkeymap(\"v\", \"\u003cA-k\u003e\", \":m .-2\u003cCR\u003e==\", opts)\nkeymap(\"v\", \"p\", '\"_dP', opts)\n\n-- Visual Block --\n-- Move text up and down\nkeymap(\"x\", \"J\", \":move '\u003e+1\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"K\", \":move '\u003c-2\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"\u003cA-j\u003e\", \":move '\u003e+1\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"\u003cA-k\u003e\", \":move '\u003c-2\u003cCR\u003egv-gv\", opts)\n\n-- Terminal --\n-- Better terminal navigation\nkeymap(\"t\", \"\u003cC-h\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003eh\", term_opts)\nkeymap(\"t\", \"\u003cC-j\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003ej\", term_opts)\nkeymap(\"t\", \"\u003cC-k\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003ek\", term_opts)\nkeymap(\"t\", \"\u003cC-l\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003el\", term_opts)\n\n-- Clipboard workaround --\n-- Function to copy to system clipboard\nvim.cmd([[\nfunction! CopyToSystemClipboard() range\n  let l:saved_register = @\"\n  execute \"normal! vgvy\"\n  let l:text = @\"\n  call system('xclip -selection clipboard', l:text)\n  let @\" = l:saved_register\nendfunction\n]])\n\n-- Copy to clipboard (Linux/WSL)\nkeymap(\"v\", \"\u003cC-c\u003e\", ':call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"n\", \"\u003cC-c\u003e\", 'V:call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"n\", \"\u003cleader\u003ey\", 'V:call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"v\", \"\u003cleader\u003ey\", ':call CopyToSystemClipboard()\u003cCR\u003e', opts)\n","recorded":"2025-09-26 15:40:17.644252152","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"","recorded":"2025-09-26 15:36:17.793131347","filePath":"null","pinned":false},{"value":"Error detected while processing /home/alien/.config/nvim/init.lua:                                                                              \nE5113: Error while calling lua chunk: /home/alien/.config/nvim/lua/keymaps.lua:15: loop or previous error loading module 'keymaps'              \nstack traceback:                                                                                                                                \n        [C]: in function 'require'                                                                                                              \n        /home/alien/.config/nvim/lua/keymaps.lua:15: in main chunk                                                                              \n        [C]: in function 'require'                                                                                                              \n        /home/alien/.config/nvim/init.lua:15: in main chunk","recorded":"2025-09-26 15:27:37.855685843","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It's called implicitly by Neovim's folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  -- Move to the top of the file without adding to jumplist\n  vim.cmd(\"keepjumps normal! gg\")\n  -- Get the total number of lines\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    -- Get the content of the current line\n    local line_content = vim.fn.getline(line)\n    -- \"^\" -\u003e Ensures the match is at the start of the line\n    -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n    -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n    -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      -- Move the cursor to the current line without adding to jumplist\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      -- Check if the current line has a fold level \u003e 0\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        -- Fold the heading if it matches the level\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n        -- else\n        --   vim.notify(\"No fold at line \" .. line, vim.log.levels.WARN)\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  -- I save the view to know where to jump back after folding\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  -- Restore the view to jump to where I was\n  vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfj\", function()\n  -- Reloads the file to refresh folds, otheriise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfk\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfl\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emf;\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Use \u003cCR\u003e to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  -- Get the current line number\n  local line = vim.fn.line(\".\")\n  -- Get the fold level of the current line\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from \u003cleader\u003emfj to\n-- zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfu\", function()\n  -- Reloads the file to reflect the changes\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\") -- Unfold all headings\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- gk jummps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- Difference between normal and normal!\n  -- - `normal` executes the command and respects any mappings that might be defined.\n  -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n  vim.cmd(\"normal gk\")\n  -- This is to fold the line under the cursor\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------","recorded":"2025-09-26 15:26:58.816805271","filePath":"null","pinned":false},{"value":"local opts = { noremap = true, silent = true }\n\nlocal term_opts = { silent = true }\n\n-- Shorten function name\nlocal keymap = vim.api.nvim_set_keymap\n\n-- Normal --\n-- Better window navigation\nkeymap(\"n\", \"\u003cC-h\u003e\", \"\u003cC-w\u003eh\", opts)\nkeymap(\"n\", \"\u003cC-j\u003e\", \"\u003cC-w\u003ej\", opts)\nkeymap(\"n\", \"\u003cC-k\u003e\", \"\u003cC-w\u003ek\", opts)\nkeymap(\"n\", \"\u003cC-l\u003e\", \"\u003cC-w\u003el\", opts)\n\n-- Navigate buffers\nkeymap(\"n\", \"\u003cS-l\u003e\", \":bnext\u003cCR\u003e\", opts)\nkeymap(\"n\", \"\u003cS-h\u003e\", \":bprevious\u003cCR\u003e\", opts)\n\n-- Move text up and down\nkeymap(\"n\", \"\u003cA-j\u003e\", \"\u003cEsc\u003e:m .+1\u003cCR\u003e==gi\", opts)\nkeymap(\"n\", \"\u003cA-k\u003e\", \"\u003cEsc\u003e:m .-2\u003cCR\u003e==gi\", opts)\n\n-- Insert --\n-- Press jk fast to enter\nkeymap(\"i\", \"jk\", \"\u003cESC\u003e\", opts)\n\n-- Visual --\n-- Stay in indent mode\nkeymap(\"v\", \"\u003c\", \"\u003cgv\", opts)\nkeymap(\"v\", \"\u003e\", \"\u003egv\", opts)\n\n-- Move text up and down\nkeymap(\"v\", \"\u003cA-j\u003e\", \":m .+1\u003cCR\u003e==\", opts)\nkeymap(\"v\", \"\u003cA-k\u003e\", \":m .-2\u003cCR\u003e==\", opts)\nkeymap(\"v\", \"p\", '\"_dP', opts)\n\n-- Visual Block --\n-- Move text up and down\nkeymap(\"x\", \"J\", \":move '\u003e+1\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"K\", \":move '\u003c-2\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"\u003cA-j\u003e\", \":move '\u003e+1\u003cCR\u003egv-gv\", opts)\nkeymap(\"x\", \"\u003cA-k\u003e\", \":move '\u003c-2\u003cCR\u003egv-gv\", opts)\n\n-- Terminal --\n-- Better terminal navigation\nkeymap(\"t\", \"\u003cC-h\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003eh\", term_opts)\nkeymap(\"t\", \"\u003cC-j\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003ej\", term_opts)\nkeymap(\"t\", \"\u003cC-k\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003ek\", term_opts)\nkeymap(\"t\", \"\u003cC-l\u003e\", \"\u003cC-\\\\\u003e\u003cC-N\u003e\u003cC-w\u003el\", term_opts)\n\n-- Clipboard workaround --\n-- Function to copy to system clipboard\nvim.cmd([[\nfunction! CopyToSystemClipboard() range\n  let l:saved_register = @\"\n  execute \"normal! vgvy\"\n  let l:text = @\"\n  call system('xclip -selection clipboard', l:text)\n  let @\" = l:saved_register\nendfunction\n]])\n\n-- Copy to clipboard (Linux/WSL)\nkeymap(\"v\", \"\u003cC-c\u003e\", ':call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"n\", \"\u003cC-c\u003e\", 'V:call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"n\", \"\u003cleader\u003ey\", 'V:call CopyToSystemClipboard()\u003cCR\u003e', opts)\nkeymap(\"v\", \"\u003cleader\u003ey\", ':call CopyToSystemClipboard()\u003cCR\u003e', opts)\n\n\n-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It’s called implicitly by Neovim’s folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  -- Move to the top of the file without adding to jumplist\n  vim.cmd(\"keepjumps normal! gg\")\n  -- Get the total number of lines\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    -- Get the content of the current line\n    local line_content = vim.fn.getline(line)\n    -- \"^\" -\u003e Ensures the match is at the start of the line\n    -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n    -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n    -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      -- Move the cursor to the current line without adding to jumplist\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      -- Check if the current line has a fold level \u003e 0\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        -- Fold the heading if it matches the level\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n        -- else\n        --   vim.notify(\"No fold at line \" .. line, vim.log.levels.WARN)\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  -- I save the view to know where to jump back after folding\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  -- Restore the view to jump to where I was\n  vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfj\", function()\n  -- Reloads the file to refresh folds, otheriise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfk\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfl\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emf;\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Use \u003cCR\u003e to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  -- Get the current line number\n  local line = vim.fn.line(\".\")\n  -- Get the fold level of the current line\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from \u003cleader\u003emfj to\n-- zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfu\", function()\n  -- Reloads the file to reflect the changes\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\") -- Unfold all headings\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- gk jummps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- Difference between normal and normal!\n  -- - `normal` executes the command and respects any mappings that might be defined.\n  -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n  vim.cmd(\"normal gk\")\n  -- This is to fold the line under the cursor\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 15:26:26.645233433","filePath":"null","pinned":false},{"value":"-------------------------------------------------------------------------------\n--                           Folding section\n-------------------------------------------------------------------------------\n\n-- Checks each line to see if it matches a markdown heading (#, ##, etc.):\n-- It’s called implicitly by Neovim’s folding engine by vim.opt_local.foldexpr\nfunction _G.markdown_foldexpr()\n  local lnum = vim.v.lnum\n  local line = vim.fn.getline(lnum)\n  local heading = line:match(\"^(#+)%s\")\n  if heading then\n    local level = #heading\n    if level == 1 then\n      -- Special handling for H1\n      if lnum == 1 then\n        return \"\u003e1\"\n      else\n        local frontmatter_end = vim.b.frontmatter_end\n        if frontmatter_end and (lnum == frontmatter_end + 1) then\n          return \"\u003e1\"\n        end\n      end\n    elseif level \u003e= 2 and level \u003c= 6 then\n      -- Regular handling for H2-H6\n      return \"\u003e\" .. level\n    end\n  end\n  return \"=\"\nend\n\nlocal function set_markdown_folding()\n  vim.opt_local.foldmethod = \"expr\"\n  vim.opt_local.foldexpr = \"v:lua.markdown_foldexpr()\"\n  vim.opt_local.foldlevel = 99\n\n  -- Detect frontmatter closing line\n  local lines = vim.api.nvim_buf_get_lines(0, 0, -1, false)\n  local found_first = false\n  local frontmatter_end = nil\n  for i, line in ipairs(lines) do\n    if line == \"---\" then\n      if not found_first then\n        found_first = true\n      else\n        frontmatter_end = i\n        break\n      end\n    end\n  end\n  vim.b.frontmatter_end = frontmatter_end\nend\n\n-- Use autocommand to apply only to markdown files\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"markdown\",\n  callback = set_markdown_folding,\n})\n\n-- Function to fold all headings of a specific level\nlocal function fold_headings_of_level(level)\n  -- Move to the top of the file without adding to jumplist\n  vim.cmd(\"keepjumps normal! gg\")\n  -- Get the total number of lines\n  local total_lines = vim.fn.line(\"$\")\n  for line = 1, total_lines do\n    -- Get the content of the current line\n    local line_content = vim.fn.getline(line)\n    -- \"^\" -\u003e Ensures the match is at the start of the line\n    -- string.rep(\"#\", level) -\u003e Creates a string with 'level' number of \"#\" characters\n    -- \"%s\" -\u003e Matches any whitespace character after the \"#\" characters\n    -- So this will match `## `, `### `, `#### ` for example, which are markdown headings\n    if line_content:match(\"^\" .. string.rep(\"#\", level) .. \"%s\") then\n      -- Move the cursor to the current line without adding to jumplist\n      vim.cmd(string.format(\"keepjumps call cursor(%d, 1)\", line))\n      -- Check if the current line has a fold level \u003e 0\n      local current_foldlevel = vim.fn.foldlevel(line)\n      if current_foldlevel \u003e 0 then\n        -- Fold the heading if it matches the level\n        if vim.fn.foldclosed(line) == -1 then\n          vim.cmd(\"normal! za\")\n        end\n        -- else\n        --   vim.notify(\"No fold at line \" .. line, vim.log.levels.WARN)\n      end\n    end\n  end\nend\n\nlocal function fold_markdown_headings(levels)\n  -- I save the view to know where to jump back after folding\n  local saved_view = vim.fn.winsaveview()\n  for _, level in ipairs(levels) do\n    fold_headings_of_level(level)\n  end\n  vim.cmd(\"nohlsearch\")\n  -- Restore the view to jump to where I was\n  vim.fn.winrestview(saved_view)\nend\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 1 or above\nvim.keymap.set(\"n\", \"zj\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfj\", function()\n  -- Reloads the file to refresh folds, otheriise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2, 1 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 1 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 2 or above\n-- I know, it reads like \"madafaka\" but \"k\" for me means \"2\"\nvim.keymap.set(\"n\", \"zk\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfk\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3, 2 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 3 or above\nvim.keymap.set(\"n\", \"zl\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfl\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4, 3 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 3 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for folding markdown headings of level 4 or above\nvim.keymap.set(\"n\", \"z;\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emf;\", function()\n  -- Reloads the file to refresh folds, otherwise you have to re-open neovim\n  vim.cmd(\"edit!\")\n  -- Unfold everything first or I had issues\n  vim.cmd(\"normal! zR\")\n  fold_markdown_headings({ 6, 5, 4 })\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold all headings level 4 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Use \u003cCR\u003e to fold when in normal mode\n-- To see help about folds use `:help fold`\nvim.keymap.set(\"n\", \"\u003cCR\u003e\", function()\n  -- Get the current line number\n  local line = vim.fn.line(\".\")\n  -- Get the fold level of the current line\n  local foldlevel = vim.fn.foldlevel(line)\n  if foldlevel == 0 then\n    vim.notify(\"No fold found\", vim.log.levels.INFO)\n  else\n    vim.cmd(\"normal! za\")\n    vim.cmd(\"normal! zz\") -- center the cursor line on screen\n  end\nend, { desc = \"[P]Toggle fold\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- Keymap for unfolding markdown headings of level 2 or above\n-- Changed all the markdown folding and unfolding keymaps from \u003cleader\u003emfj to\n-- zj, zk, zl, z; and zu respectively lamw25wmal\nvim.keymap.set(\"n\", \"zu\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- vim.keymap.set(\"n\", \"\u003cleader\u003emfu\", function()\n  -- Reloads the file to reflect the changes\n  vim.cmd(\"edit!\")\n  vim.cmd(\"normal! zR\") -- Unfold all headings\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Unfold all headings level 2 or above\" })\n\n-- HACK: Fold markdown headings in Neovim with a keymap\n-- https://youtu.be/EYczZLNEnIY\n--\n-- gk jummps to the markdown heading above and then folds it\n-- zi by default toggles folding, but I don't need it lamw25wmal\nvim.keymap.set(\"n\", \"zi\", function()\n  -- \"Update\" saves only if the buffer has been modified since the last save\n  vim.cmd(\"silent update\")\n  -- Difference between normal and normal!\n  -- - `normal` executes the command and respects any mappings that might be defined.\n  -- - `normal!` executes the command in a \"raw\" mode, ignoring any mappings.\n  vim.cmd(\"normal gk\")\n  -- This is to fold the line under the cursor\n  vim.cmd(\"normal! za\")\n  vim.cmd(\"normal! zz\") -- center the cursor line on screen\nend, { desc = \"[P]Fold the heading cursor currently on\" })\n\n-------------------------------------------------------------------------------\n--                         End Folding section\n-------------------------------------------------------------------------------\n","recorded":"2025-09-26 15:25:27.621567191","filePath":"null","pinned":false},{"value":"return {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"ts_ls\",\n        },\n      })\n    end,\n  },\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local lspconfig = require(\"lspconfig\")\n      \n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n      \n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n      \n      -- Lua Language Server\n      lspconfig.lua_ls.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = {\n            diagnostics = {\n              globals = { \"vim\" }\n            }\n          }\n        }\n      })\n      \n      -- Python\n      lspconfig.pyright.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n      \n      -- TailwindCSS\n      lspconfig.tailwindcss.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n      \n      -- TypeScript\n      lspconfig.ts_ls.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n    end,\n  },\n}\n","recorded":"2025-09-26 15:23:31.606164362","filePath":"null","pinned":false},{"value":"return {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"ts_ls\",\n        },\n      })\n    end,\n  },\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n      \n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n      \n      -- Lua Language Server\n      vim.lsp.config.lua_ls = {\n        cmd = { \"lua-language-server\" },\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = {\n            diagnostics = {\n              globals = { \"vim\" }\n            }\n          }\n        }\n      }\n      \n      -- Python\n      vim.lsp.config.pyright = {\n        cmd = { \"pyright-langserver\", \"--stdio\" },\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      \n      -- TailwindCSS\n      vim.lsp.config.tailwindcss = {\n        cmd = { \"tailwindcss-language-server\", \"--stdio\" },\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      \n      -- TypeScript\n      vim.lsp.config.ts_ls = {\n        cmd = { \"typescript-language-server\", \"--stdio\" },\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      \n      -- Auto-start LSP servers for appropriate file types\n      vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = { \"lua\" },\n        callback = function()\n          vim.lsp.start(vim.lsp.config.lua_ls)\n        end,\n      })\n      \n      vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = { \"python\" },\n        callback = function()\n          vim.lsp.start(vim.lsp.config.pyright)\n        end,\n      })\n      \n      vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = { \"css\", \"html\", \"javascript\", \"typescript\", \"vue\", \"svelte\" },\n        callback = function()\n          vim.lsp.start(vim.lsp.config.tailwindcss)\n        end,\n      })\n      \n      vim.api.nvim_create_autocmd(\"FileType\", {\n        pattern = { \"javascript\", \"typescript\", \"javascriptreact\", \"typescriptreact\" },\n        callback = function()\n          vim.lsp.start(vim.lsp.config.ts_ls)\n        end,\n      })\n    end,\n  },\n}","recorded":"2025-09-26 15:23:13.085216004","filePath":"null","pinned":false},{"value":"The `require('lspconfig')` \"framework\" is deprecated, use vim.lsp.config (see :help lspconfig-nvim-0.11) instead.                               \nFeature will be removed in nvim-lspconfig v3.0.0","recorded":"2025-09-26 15:22:45.463418956","filePath":"null","pinned":false},{"value":"[Neo-tree ERROR] Error opening file: vim/_editor.lua:0: nvim_exec2()[1]..BufReadPost Autocommands for \"*\": Vim(append):Error executing lua callb\nack: /usr/share/nvim/runtime/filetype.lua:36: nvim_exec2()[1]..BufReadPost Autocommands for \"*\"..FileType Autocommands for \"*\": Vim(append):Erro\nr executing lua callback: /home/alien/.config/nvim/init.lua:46: 'win' cannot be passed for global option 'foldlevelstart'                       \nstack traceback:                                                                                                                                \n        [C]: in function '__newindex'                                                                                                           \n        /home/alien/.config/nvim/init.lua:46: in function \u003c/home/alien/.config/nvim/init.lua:37\u003e                                                \n        [C]: in function 'nvim_cmd'                                                                                                             \n        /usr/share/nvim/runtime/filetype.lua:36: in function \u003c/usr/share/nvim/runtime/filetype.lua:35\u003e                                          \n        [C]: in function 'pcall'                                                                                                                \n        vim/shared.lua: in function \u003cvim/shared.lua:0\u003e                                                                                          \n        [C]: in function '_with'                                                                                                                \n        /usr/share/nvim/runtime/filetype.lua:35: in function \u003c/usr/share/nvim/runtime/filetype.lua:10\u003e                                          \n        [C]: in function 'nvim_exec2'                                                                                                           \n        vim/_editor.lua: in function \u003cvim/_editor.lua:0\u003e                                                                                        \n        [C]: in function 'pcall'                                                                                                                \n        ...hare/nvim/lazy/neo-tree.nvim/lua/neo-tree/utils/init.lua:821: in function 'open_file'                                                \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:807: in function 'open'                                                     \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:829: in function 'open_with_cmd'                                            \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:837: in function 'open'                                                     \n        ...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lua:206: in function \u003c...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lu\na:205\u003e                                                                                                                                          \nstack traceback:                                                                                                                                \n        [C]: in function '_with'                                                                                                                \n        /usr/share/nvim/runtime/filetype.lua:35: in function \u003c/usr/share/nvim/runtime/filetype.lua:10\u003e                                          \n        [C]: in function 'nvim_exec2'                                                                                                           \n        vim/_editor.lua: in function \u003cvim/_editor.lua:0\u003e                                                                                        \n        [C]: in function 'pcall'                                                                                                                \n        ...hare/nvim/lazy/neo-tree.nvim/lua/neo-tree/utils/init.lua:821: in function 'open_file'                                                \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:807: in function 'open'                                                     \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:829: in function 'open_with_cmd'                                            \n        ...y/neo-tree.nvim/lua/neo-tree/sources/common/commands.lua:837: in function 'open'                                                     \n        ...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lua:206: in function \u003c...o-tree.nvim/lua/neo-tree/sources/filesystem/commands.lu\na:205\u003e","recorded":"2025-09-26 15:18:40.210920075","filePath":"null","pinned":false},{"value":"vim.opt.foldcolumn = \"0\"\nvim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\nvim.opt.foldtext = \"\"\nvim.opt.foldnestmax = 3\nvim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 99\nlocal function close_all_folds()\n  vim.api.nvim_exec2(\"%foldc!\", { output = false })\nend\nlocal function open_all_folds()\n  vim.api.nvim_exec2(\"%foldo!\", { output = false })\nend\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n","recorded":"2025-09-26 15:17:52.552585221","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Folding setup - defer until after plugins load\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldmethod = \"expr\"\n    vim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Alternative folding setup that works better with Treesitter\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"*\",\n  callback = function()\n    -- Only set folding for supported file types\n    local ft = vim.bo.filetype\n    local supported_fts = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\", \"markdown\" }\n    \n    if vim.tbl_contains(supported_fts, ft) then\n      vim.wo.foldmethod = \"expr\"\n      vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n      vim.wo.foldlevel = 99\n      vim.wo.foldlevelstart = 99\n    end\n  end,\n})\n\n-- Folding keymaps\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n\n-- Additional useful fold keymaps\nvim.keymap.set(\"n\", \"za\", \"za\", { desc = \"Toggle fold\" })\nvim.keymap.set(\"n\", \"zc\", \"zc\", { desc = \"Close fold\" })\nvim.keymap.set(\"n\", \"zo\", \"zo\", { desc = \"Open fold\" })\nvim.keymap.set(\"n\", \"zj\", \"zj\", { desc = \"Move to next fold\" })\nvim.keymap.set(\"n\", \"zk\", \"zk\", { desc = \"Move to previous fold\" })\n","recorded":"2025-09-26 15:17:42.395788202","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\nlocal opts = {}\nrequire(\"vim-options\")\nrequire (\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\nvim.opt.clipboard = \"unnamedplus\"\nvim.opt.foldcolumn = \"0\"\nvim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\nvim.opt.foldtext = \"\"\nvim.opt.foldnestmax = 3\nvim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 99\nlocal function close_all_folds()\n  vim.api.nvim_exec2(\"%foldc!\", { output = false })\nend\nlocal function open_all_folds()\n  vim.api.nvim_exec2(\"%foldo!\", { output = false })\nend\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })","recorded":"2025-09-26 15:17:39.402647233","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nlocal opts = {}\n\nrequire(\"vim-options\")\nrequire (\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\nvim.opt.clipboard = \"unnamedplus\"\n\nvim.opt.foldcolumn = \"0\"\nvim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\nvim.opt.foldtext = \"\"\n\nvim.opt.foldnestmax = 3\nvim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 99\n\nlocal function close_all_folds()\n  vim.api.nvim_exec2(\"%foldc!\", { output = false })\nend\nlocal function open_all_folds()\n  vim.api.nvim_exec2(\"%foldo!\", { output = false })\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n","recorded":"2025-09-26 15:14:00.893696435","filePath":"null","pinned":false},{"value":"local lazypath = vim.fn.stdpath(\"data\") .. \"/lazy/lazy.nvim\"\nif not (vim.uv or vim.loop).fs_stat(lazypath) then\n  vim.fn.system({\n    \"git\",\n    \"clone\",\n    \"--filter=blob:none\",\n    \"https://github.com/folke/lazy.nvim.git\",\n    \"--branch=stable\", -- latest stable release\n    lazypath,\n  })\nend\nvim.opt.rtp:prepend(lazypath)\n\nrequire(\"vim-options\")\nrequire(\"keymaps\")\nrequire(\"lazy\").setup(\"plugins\")\n\n-- Clipboard\nvim.opt.clipboard = \"unnamedplus\"\n\n-- Folding setup - defer until after plugins load\nvim.api.nvim_create_autocmd(\"VimEnter\", {\n  callback = function()\n    vim.opt.foldcolumn = \"0\"\n    vim.opt.foldmethod = \"expr\"\n    vim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n    vim.opt.foldtext = \"\"\n    vim.opt.foldnestmax = 3\n    vim.opt.foldlevel = 99\n    vim.opt.foldlevelstart = 99\n  end,\n})\n\n-- Alternative folding setup that works better with Treesitter\nvim.api.nvim_create_autocmd(\"FileType\", {\n  pattern = \"*\",\n  callback = function()\n    -- Only set folding for supported file types\n    local ft = vim.bo.filetype\n    local supported_fts = { \"lua\", \"python\", \"javascript\", \"typescript\", \"html\", \"css\", \"json\", \"markdown\" }\n    \n    if vim.tbl_contains(supported_fts, ft) then\n      vim.wo.foldmethod = \"expr\"\n      vim.wo.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\n      vim.wo.foldlevel = 99\n      vim.wo.foldlevelstart = 99\n    end\n  end,\n})\n\n-- Folding keymaps\nlocal function close_all_folds()\n  vim.cmd(\"normal! zM\")\nend\n\nlocal function open_all_folds()\n  vim.cmd(\"normal! zR\")\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })\n\n-- Additional useful fold keymaps\nvim.keymap.set(\"n\", \"za\", \"za\", { desc = \"Toggle fold\" })\nvim.keymap.set(\"n\", \"zc\", \"zc\", { desc = \"Close fold\" })\nvim.keymap.set(\"n\", \"zo\", \"zo\", { desc = \"Open fold\" })\nvim.keymap.set(\"n\", \"zj\", \"zj\", { desc = \"Move to next fold\" })\nvim.keymap.set(\"n\", \"zk\", \"zk\", { desc = \"Move to previous fold\" })","recorded":"2025-09-26 15:13:51.515536846","filePath":"null","pinned":false},{"value":"return {\n  \"nvim-treesitter/nvim-treesitter\", \n  build = \":TSUpdate\",\n  config = function ()\n    local config = require(\"nvim-treesitter.configs\")\n    config.setup ({\n      auto_install = true,\n      highlight = { enable = true },\n      indent = { enable = true },\n    })\n  end\n}\n","recorded":"2025-09-26 15:13:12.729753034","filePath":"null","pinned":false},{"value":"-- plugins/treesitter.lua\nreturn {\n  {\n    \"nvim-treesitter/nvim-treesitter\",\n    build = \":TSUpdate\",\n    config = function()\n      require(\"nvim-treesitter.configs\").setup({\n        ensure_installed = {\n          \"lua\",\n          \"python\",\n          \"javascript\",\n          \"typescript\",\n          \"html\",\n          \"css\",\n          \"json\",\n          \"markdown\",\n          \"bash\",\n          \"vim\",\n          \"vimdoc\",\n        },\n        sync_install = false,\n        auto_install = true,\n        highlight = {\n          enable = true,\n          additional_vim_regex_highlighting = false,\n        },\n        indent = {\n          enable = true,\n        },\n        fold = {\n          enable = true,\n        },\n      })\n    end,\n  },\n}","recorded":"2025-09-26 15:13:09.050243236","filePath":"null","pinned":false},{"value":"oldexpr()\"","recorded":"2025-09-26 15:11:19.649722420","filePath":"null","pinned":false},{"value":"return {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"tsserver\",\n          \"ts_ls\", -- tsserver → ts_ls\n        },\n      })\n    end,\n  },\n\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n\n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n\n      -- Lua\n      vim.lsp.config[\"lua_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = { diagnostics = { globals = { \"vim\" } } },\n        },\n      }\n      vim.lsp.start(vim.lsp.config[\"lua_ls\"])\n\n      -- Python\n      vim.lsp.config[\"pyright\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"pyright\"])\n\n      -- TailwindCSS\n      vim.lsp.config[\"tailwindcss\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"tailwindcss\"])\n\n      -- TypeScript (use ts_ls instead of tsserver)\n      vim.lsp.config[\"ts_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"ts_ls\"])\n    end,\n  },\n}\n\n","recorded":"2025-09-26 15:09:47.972490068","filePath":"null","pinned":false},{"value":"return {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"ts_ls\",\n        },\n      })\n    end,\n  },\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local lspconfig = require(\"lspconfig\")\n      \n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n      \n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n      \n      -- Lua Language Server\n      lspconfig.lua_ls.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = {\n            diagnostics = {\n              globals = { \"vim\" }\n            }\n          }\n        }\n      })\n      \n      -- Python\n      lspconfig.pyright.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n      \n      -- TailwindCSS\n      lspconfig.tailwindcss.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n      \n      -- TypeScript\n      lspconfig.ts_ls.setup({\n        on_attach = on_attach,\n        capabilities = capabilities,\n      })\n    end,\n  },\n}","recorded":"2025-09-26 15:09:33.746968385","filePath":"null","pinned":false},{"value":"/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"lua-language-server\" }` failed. The language serve\nr is either not installed, missing from PATH, or not executable.                                                                                \n/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"tailwindcss-language-server\", \"--stdio\" }` failed.\n The language server is either not installed, missing from PATH, or not executable.                                                             \n/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"typescript-language-server\", \"--stdio\" }` failed. \nThe language server is either not installed, missing from PATH, or not executable.\n\nneovim error and this is my lsp config:\nreturn {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"ts_ls\", -- tsserver → ts_ls\n        },\n      })\n    end,\n  },\n\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n\n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n\n      -- Lua\n      vim.lsp.config[\"lua_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = { diagnostics = { globals = { \"vim\" } } },\n        },\n      }\n      vim.lsp.start(vim.lsp.config[\"lua_ls\"])\n\n      -- Python\n      vim.lsp.config[\"pyright\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"pyright\"])\n\n      -- TailwindCSS\n      vim.lsp.config[\"tailwindcss\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"tailwindcss\"])\n\n      -- TypeScript (use ts_ls instead of tsserver)\n      vim.lsp.config[\"ts_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"ts_ls\"])\n    end,\n  },\n}\n","recorded":"2025-09-26 15:08:18.383033539","filePath":"null","pinned":false},{"value":"tsserver","recorded":"2025-09-26 15:06:23.388436357","filePath":"null","pinned":false},{"value":"return {\n  {\n    \"williamboman/mason.nvim\",\n    config = function()\n      require(\"mason\").setup()\n    end,\n  },\n\n  {\n    \"williamboman/mason-lspconfig.nvim\",\n    config = function()\n      require(\"mason-lspconfig\").setup({\n        ensure_installed = {\n          \"lua_ls\",\n          \"pyright\",\n          \"tailwindcss\",\n          \"ts_ls\", -- tsserver → ts_ls\n        },\n      })\n    end,\n  },\n\n  {\n    \"neovim/nvim-lspconfig\",\n    config = function()\n      local on_attach = function(_, bufnr)\n        local opts = { buffer = bufnr, noremap = true, silent = true }\n        vim.keymap.set(\"n\", \"K\", vim.lsp.buf.hover, opts)\n        vim.keymap.set(\"n\", \"gd\", vim.lsp.buf.definition, opts)\n        vim.keymap.set({ \"n\", \"v\" }, \"\u003cleader\u003eca\", vim.lsp.buf.code_action, opts)\n      end\n\n      local capabilities = vim.lsp.protocol.make_client_capabilities()\n\n      -- Lua\n      vim.lsp.config[\"lua_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n        settings = {\n          Lua = { diagnostics = { globals = { \"vim\" } } },\n        },\n      }\n      vim.lsp.start(vim.lsp.config[\"lua_ls\"])\n\n      -- Python\n      vim.lsp.config[\"pyright\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"pyright\"])\n\n      -- TailwindCSS\n      vim.lsp.config[\"tailwindcss\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"tailwindcss\"])\n\n      -- TypeScript (use ts_ls instead of tsserver)\n      vim.lsp.config[\"ts_ls\"] = {\n        on_attach = on_attach,\n        capabilities = capabilities,\n      }\n      vim.lsp.start(vim.lsp.config[\"ts_ls\"])\n    end,\n  },\n}\n\n","recorded":"2025-09-26 15:05:29.511302885","filePath":"null","pinned":false},{"value":"/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"lua-language-server\" }` failed. The language serve\nr is either not installed, missing from PATH, or not executable.                                                                                \n/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"tailwindcss-language-server\", \"--stdio\" }` failed.\n The language server is either not installed, missing from PATH, or not executable.                                                             \n/usr/share/nvim/runtime/lua/vim/lsp/_transport.lua:68: Spawning language server with cmd: `{ \"typescript-language-server\", \"--stdio\" }` failed. \nThe language server is either not installed, missing from PATH, or not executable.","recorded":"2025-09-26 15:04:45.859907197","filePath":"null","pinned":false},{"value":"vim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\nvim.opt.foldcolumn = \"0\"\nvim.opt.foldtext = \"\"\nvim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 1\nvim.opt.foldnestmax = 4\n\n","recorded":"2025-09-26 15:03:48.161659492","filePath":"null","pinned":false},{"value":"vim.opt.foldcolumn = \"0\"\nvim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"\nvim.opt.foldtext = \"\"\n\nvim.opt.foldnestmax = 3\nvim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 99\n\nlocal function close_all_folds()\n  vim.api.nvim_exec2(\"%foldc!\", { output = false })\nend\nlocal function open_all_folds()\n  vim.api.nvim_exec2(\"%foldo!\", { output = false })\nend\n\nvim.keymap.set(\"n\", \"\u003cleader\u003ezs\", close_all_folds, { desc = \"[s]hut all folds\" })\nvim.keymap.set(\"n\", \"\u003cleader\u003ezo\", open_all_folds, { desc = \"[o]pen all folds\" })","recorded":"2025-09-26 15:03:43.164751127","filePath":"null","pinned":false},{"value":"vim.opt.foldnestmax = 4\n","recorded":"2025-09-26 15:03:06.373466474","filePath":"null","pinned":false},{"value":"vim.opt.foldlevel = 99\nvim.opt.foldlevelstart = 1","recorded":"2025-09-26 15:02:53.483511368","filePath":"null","pinned":false},{"value":"vim.opt.foldtext = \"\"\n","recorded":"2025-09-26 15:02:42.445102850","filePath":"null","pinned":false},{"value":"vim.opt.foldcolumn = \"0\"\n","recorded":"2025-09-26 15:02:31.678183422","filePath":"null","pinned":false},{"value":"vim.opt.foldmethod = \"expr\"\nvim.opt.foldexpr = \"v:lua.vim.treesitter.foldexpr()\"","recorded":"2025-09-26 15:01:56.557146097","filePath":"null","pinned":false},{"value":"    IFS=';' read -sdR -p $'\\E[6n' ROW COL\n","recorded":"2025-09-26 13:14:15.531933799","filePath":"null","pinned":false},{"value":"-- Filename: ~/github/dotfiles-latest/neovim/neobean/lua/plugins/render-markdown.lua\n-- ~/github/dotfiles-latest/neovim/neobean/lua/plugins/render-markdown.lua\n--\n-- https://github.com/MeanderingProgrammer/render-markdown.nvim\n-- Using the same highlight style as headlines.nvim\nreturn {\n  \"MeanderingProgrammer/render-markdown.nvim\",\n  enabled = true,\n  opts = {\n    bullet = {\n      enabled = true,\n    },\n    checkbox = {\n      enabled = true,\n      position = \"inline\",\n      unchecked = {\n        icon = \"   󰄱 \",\n        highlight = \"RenderMarkdownUnchecked\",\n        scope_highlight = nil,\n      },\n      checked = {\n        icon = \"   󰱒 \",\n        highlight = \"RenderMarkdownChecked\",\n        scope_highlight = nil,\n      },\n    },\n    html = {\n      enabled = true,\n      comment = {\n        conceal = false,\n      },\n    },\n    link = {\n      image = vim.g.neovim_mode == \"skitty\" and \"\" or \"󰥶 \",\n      custom = {\n        youtu = { pattern = \"youtu%.be\", icon = \"󰗃 \" },\n      },\n    },\n    heading = {\n      sign = false,\n      icons = { \"󰎤 \", \"󰎧 \", \"󰎪 \", \"󰎭 \", \"󰎱 \", \"󰎳 \" },\n      backgrounds = {\n        \"Headline1Bg\",\n        \"Headline2Bg\",\n        \"Headline3Bg\",\n        \"Headline4Bg\",\n        \"Headline5Bg\",\n        \"Headline6Bg\",\n      },\n      foregrounds = {\n        \"Headline1Fg\",\n        \"Headline2Fg\",\n        \"Headline3Fg\",\n        \"Headline4Fg\",\n        \"Headline5Fg\",\n        \"Headline6Fg\",\n      },\n    },\n    code = {\n      style = \"none\",\n    },\n  },\n  config = function(_, opts)\n    -- Define highlight groups (same style as headlines.lua)\n    vim.cmd([[highlight Headline1Bg guibg=#f265b5 guifg=#323449]])\n    vim.cmd([[highlight Headline2Bg guibg=#37f499 guifg=#323449]])\n    vim.cmd([[highlight Headline3Bg guibg=#04d1f9 guifg=#323449]])\n    vim.cmd([[highlight Headline4Bg guibg=#a48cf2 guifg=#323449]])\n    vim.cmd([[highlight Headline5Bg guibg=#f1fc79 guifg=#323449]])\n    vim.cmd([[highlight Headline6Bg guibg=#f7c67f guifg=#323449]])\n    vim.cmd([[highlight Headline1Fg guifg=#f265b5]])\n    vim.cmd([[highlight Headline2Fg guifg=#37f499]])\n    vim.cmd([[highlight Headline3Fg guifg=#04d1f9]])\n    vim.cmd([[highlight Headline4Fg guifg=#a48cf2]])\n    vim.cmd([[highlight Headline5Fg guifg=#f1fc79]])\n    vim.cmd([[highlight Headline6Fg guifg=#f7c67f]])\n    \n    -- Setup plugin AFTER defining highlights\n    require(\"render-markdown\").setup(opts)\n    \n    -- Configure markdown folding\n    vim.api.nvim_create_autocmd(\"FileType\", {\n      pattern = \"markdown\",\n      callback = function()\n        vim.opt_local.foldmethod = \"expr\"\n        vim.opt_local.foldexpr = \"nvim_treesitter#foldexpr()\"\n        vim.opt_local.foldenable = true\n        vim.opt_local.foldlevel = 1  -- Start with level 1 headers open\n        vim.opt_local.foldnestmax = 6  -- Maximum 6 levels (for h1-h6)\n        \n        -- Optional: Set fold text to show header content\n        vim.opt_local.foldtext = \"v:lua.custom_markdown_foldtext()\"\n      end,\n    })\n  end,\n}\n\n-- Custom fold text function to show header content nicely\nfunction _G.custom_markdown_foldtext()\n  local line = vim.fn.getline(vim.v.foldstart)\n  local folded_lines = vim.v.foldend - vim.v.foldstart + 1\n  \n  -- Clean up the line (remove markdown syntax)\n  local clean_line = line:gsub(\"^%s*#+%s*\", \"\"):gsub(\"%s*$\", \"\")\n  \n  return string.format(\"  %s (%d lines)\", clean_line, folded_lines)\nend\n","recorded":"2025-09-26 13:13:31.283184494","filePath":"null","pinned":false},{"value":"-- Filename: ~/github/dotfiles-latest/neovim/neobean/lua/plugins/render-markdown.lua\n-- ~/github/dotfiles-latest/neovim/neobean/lua/plugins/render-markdown.lua\n--\n-- https://github.com/MeanderingProgrammer/render-markdown.nvim\n-- Using the same highlight style as headlines.nvim\nreturn {\n  \"MeanderingProgrammer/render-markdown.nvim\",\n  enabled = true,\n  opts = {\n    bullet = {\n      enabled = true,\n    },\n    checkbox = {\n      enabled = true,\n      position = \"inline\",\n      unchecked = {\n        icon = \"   󰄱 \",\n        highlight = \"RenderMarkdownUnchecked\",\n        scope_highlight = nil,\n      },\n      checked = {\n        icon = \"   󰱒 \",\n        highlight = \"RenderMarkdownChecked\",\n        scope_highlight = nil,\n      },\n    },\n    html = {\n      enabled = true,\n      comment = {\n        conceal = false,\n      },\n    },\n    link = {\n      image = vim.g.neovim_mode == \"skitty\" and \"\" or \"󰥶 \",\n      custom = {\n        youtu = { pattern = \"youtu%.be\", icon = \"󰗃 \" },\n      },\n    },\n    heading = {\n      sign = false,\n      icons = { \"󰎤 \", \"󰎧 \", \"󰎪 \", \"󰎭 \", \"󰎱 \", \"󰎳 \" },\n      backgrounds = {\n        \"Headline1Bg\",\n        \"Headline2Bg\",\n        \"Headline3Bg\",\n        \"Headline4Bg\",\n        \"Headline5Bg\",\n        \"Headline6Bg\",\n      },\n      foregrounds = {\n        \"Headline1Fg\",\n        \"Headline2Fg\",\n        \"Headline3Fg\",\n        \"Headline4Fg\",\n        \"Headline5Fg\",\n        \"Headline6Fg\",\n      },\n    },\n    code = {\n      style = \"none\",\n    },\n  },\n  config = function(_, opts)\n    -- Define highlight groups (same style as headlines.lua)\n    vim.cmd([[highlight Headline1Bg guibg=#f265b5 guifg=#323449]])\n    vim.cmd([[highlight Headline2Bg guibg=#37f499 guifg=#323449]])\n    vim.cmd([[highlight Headline3Bg guibg=#04d1f9 guifg=#323449]])\n    vim.cmd([[highlight Headline4Bg guibg=#a48cf2 guifg=#323449]])\n    vim.cmd([[highlight Headline5Bg guibg=#f1fc79 guifg=#323449]])\n    vim.cmd([[highlight Headline6Bg guibg=#f7c67f guifg=#323449]])\n    vim.cmd([[highlight Headline1Fg guifg=#f265b5]])\n    vim.cmd([[highlight Headline2Fg guifg=#37f499]])\n    vim.cmd([[highlight Headline3Fg guifg=#04d1f9]])\n    vim.cmd([[highlight Headline4Fg guifg=#a48cf2]])\n    vim.cmd([[highlight Headline5Fg guifg=#f1fc79]])\n    vim.cmd([[highlight Headline6Fg guifg=#f7c67f]])\n    \n    -- Setup plugin AFTER defining highlights\n    require(\"render-markdown\").setup(opts)\n    \n    -- Configure markdown folding\n    vim.api.nvim_create_autocmd(\"FileType\", {\n      pattern = \"markdown\",\n      callback = function()\n        -- Simple syntax-based folding that works without treesitter\n        vim.opt_local.foldmethod = \"syntax\"\n        vim.opt_local.foldenable = true\n        vim.opt_local.foldlevel = 1  -- Start with level 1 headers open\n        vim.opt_local.foldnestmax = 6  -- Maximum 6 levels (for h1-h6)\n      end,\n    })\n  end,\n}","recorded":"2025-09-26 13:12:40.644655119","filePath":"null","pinned":false}]}